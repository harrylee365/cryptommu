#include "../../BenchmarkNode.h"
#include <stdint.h>
#include <cmath>
#include <cstdlib>
#include <iostream>

#define IMG_W       64
#define IMG_H       64
#define WIN         8
#define SHIFT       64


class SW_Disparity_Map : public BenchmarkNode
{
	int dataSize;
	int thread;

	float (*ILeft)[IMG_H + WIN][IMG_W + WIN];
	float (*IRight)[IMG_H + WIN][IMG_W + WIN];
	float *(*ILeft_p)[SHIFT][IMG_H + WIN][IMG_W + WIN];
	float (*IRight_mov)[SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	float (*SAD)[SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	float (*integralRow)[SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	float (*integralImg)[SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	float *(*IImg1)[IMG_H][IMG_W][SHIFT];
    float *(*IImg2)[IMG_H][IMG_W][SHIFT];
    float *(*IImg3)[IMG_H][IMG_W][SHIFT];
    float *(*IImg4)[IMG_H][IMG_W][SHIFT];
	float (*retDisp)[IMG_H][IMG_W][SHIFT][1];
	
	void DispMapCompSAD(float in_ILeft[1], float in_IRight_mov[1], float out_SAD[1]);
	void DispMapIntegSum(float in_reset, float in_val[1], float out_sum[1]);
	void DispMapFindDisp(float in_IImg1[1], float in_IImg2[1], float in_IImg3[1], float in_IImg4[1], float in_index, float out_Disp[1]);

public:
	SW_Disparity_Map()
	{
		std::cin >> dataSize;
	}
	virtual void Initialize(int threadID, int procID);
	virtual void Run();
	virtual void Shutdown();
};

BENCH_DECL(SW_Disparity_Map);

void SW_Disparity_Map::DispMapCompSAD(float in_ILeft[1], float in_IRight_mov[1], float out_SAD[1])
{
	out_SAD[0] = in_ILeft[0] * in_ILeft[0] - 2 * in_ILeft[0] * in_IRight_mov[0] + in_IRight_mov[0] * in_IRight_mov[0];
}
void SW_Disparity_Map::DispMapIntegSum(float in_reset, float in_val[1], float out_sum[1])
{
	static float internal_sum = 0.f;
	if (in_reset == 0.f)
		internal_sum = 0.f;
	out_sum[0] = internal_sum + in_val[0];
	internal_sum = out_sum[0];
}
void SW_Disparity_Map::DispMapFindDisp(float in_IImg1[1], float in_IImg2[1], float in_IImg3[1], float in_IImg4[1], float in_index, float out_Disp[1])
{
	// Compute SAD (Sum of Absolute Differences) value
    float SAD = in_IImg1[0] + in_IImg2[0] - in_IImg3[0] - in_IImg4[0];

	// Check for minimum SAD value and return its index (i.e. disparity value)
	static float internal_min = 0.f, internal_index = 0.f;
	if (in_index == 0.f || SAD < internal_min) {
		internal_min = SAD;
		internal_index = in_index;
	}
	out_Disp[0] = internal_index;
}
void SW_Disparity_Map::Initialize(int threadID, int procID)
{
	thread = threadID;

	ILeft = new float[dataSize][IMG_H + WIN][IMG_W + WIN];
	IRight = new float[dataSize][IMG_H + WIN][IMG_W + WIN];
	ILeft_p = new float*[dataSize][SHIFT][IMG_H + WIN][IMG_W + WIN];
	IRight_mov = new float[dataSize][SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	SAD = new float[dataSize][SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	integralRow = new float[dataSize][SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	integralImg = new float[dataSize][SHIFT][IMG_H + WIN][IMG_W + WIN][1];
	IImg1 = new float*[dataSize][IMG_H][IMG_W][SHIFT];
    IImg2 = new float*[dataSize][IMG_H][IMG_W][SHIFT];
    IImg3 = new float*[dataSize][IMG_H][IMG_W][SHIFT];
    IImg4 = new float*[dataSize][IMG_H][IMG_W][SHIFT];
	retDisp = new float[dataSize][IMG_H][IMG_W][SHIFT][1];
	
	for (int d = 0; d < dataSize; d++) {
		for (int i = 0; i < IMG_H + WIN; i++) {
			for (int j = 0; j < IMG_W + WIN; j++) {
				ILeft[d][i][j] = IRight[d][i][j] = 0.0;
			}
		}
		for (int k = 0; k < SHIFT; k++) {
			for (int i = 0; i < IMG_H + WIN; i++) {
				for (int j = 0; j < k; j++) {
					IRight_mov[d][k][i][j][0] = 0.0;
				}
				for (int j = 0; j < IMG_W + WIN - k; j++) {
					IRight_mov[d][k][i][j+k][0] = IRight[d][i][j];
				}
				for (int j = 0; j < IMG_W + WIN; j++) {
					ILeft_p[d][k][i][j] = &(ILeft[d][i][j]);
					SAD[d][k][i][j][0] = 255.0;
					integralRow[d][k][i][j][0] = 0.0;
					integralImg[d][k][i][j][0] = 0.0;
				}
			}
			for (int i = 0; i < IMG_H; i++) {
				for (int j = 0; j < IMG_W; j++) {
					IImg1[d][i][j][k] = (float*) integralImg[d][k][i+WIN][j+WIN];
                    IImg2[d][i][j][k] = (float*) integralImg[d][k][i+1][j+1];
                    IImg3[d][i][j][k] = (float*) integralImg[d][k][i+1][j+WIN];
                    IImg4[d][i][j][k] = (float*) integralImg[d][k][i+WIN][j+1];
					retDisp[d][i][j][k][0] = 0.0;
				}
			}
		}
	}
}
void SW_Disparity_Map::Run()
{
for(int r=1;r<9;r++){
	for(int s=1;s<3;s++){
		for(int t=1;t<3;t++){
			for(int u=1;u<3;u++){


	for (int d = 0; d < dataSize/8; d++)
		for (int k = 0; k < SHIFT/2; k++)
			for (int i = 0; i < (IMG_H + WIN)/2; i++)
				for (int j = 0; j < (IMG_W + WIN)/2; j++)
					DispMapCompSAD(ILeft_p[r*d][s*k][t*i][u*j], IRight_mov[r*d][s*k][t*i][u*j], SAD[r*d][s*k][t*i][u*j]);
	
	for (int d = 0; d < dataSize/8; d++)
		for (int k = 0; k < SHIFT/2; k++)
			for (int i = 0; i < (IMG_H + WIN)/2; i++)
				for (int j = 0; j < (IMG_W + WIN)/2; j++)
					DispMapIntegSum(j*u, SAD[r*d][s*k][t*i][u*j], integralRow[r*d][s*k][t*i][u*j]);

	for (int d = 0; d < dataSize/8; d++)
		for (int k = 0; k < SHIFT/2; k++)
			for (int j = 0; j < (IMG_W + WIN)/2; j++)
				for (int i = 0; i < (IMG_H + WIN)/2; i++)
					DispMapIntegSum(i*t, integralRow[r*d][s*k][t*i][u*j], integralImg[r*d][s*k][t*i][u*j]);
	
	for (int d = 0; d < dataSize/8; d++)
		for (int i = 0; i < IMG_H/2; i++)
			for (int j = 0; j < IMG_W/2; j++)
				for (int k = 0; k < SHIFT/2; k++)
					DispMapFindDisp(IImg1[r*d][t*i][j*u][k*s], IImg2[r*d][t*i][j*u][k*s], IImg3[d*r][i*t][j*u][k*s], IImg4[d*r][i*t][j*u][k*s], k*s, retDisp[d*r][i*t][j*u][k*s]);
}
}
}
}
}
void SW_Disparity_Map::Shutdown()
{
	delete [] ILeft;
	delete [] IRight;
	delete [] ILeft_p;
	delete [] IRight_mov;
    delete [] SAD;
    delete [] integralRow;
    delete [] integralImg;
    delete [] IImg1;
    delete [] IImg2;
    delete [] IImg3;
    delete [] IImg4;
    delete [] retDisp;
	
	while(true);
}
