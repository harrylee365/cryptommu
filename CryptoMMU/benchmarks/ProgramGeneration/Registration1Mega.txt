VARIABLE STREAM IN float v1 [sizeX, sizeY, sizeZ]
VARIABLE STREAM IN float v2 [sizeX, sizeY, sizeZ]
VARIABLE STREAM IN float v3 [sizeX, sizeY, sizeZ]
VARIABLE STREAM IN float u1 [sizeX, sizeY, sizeZ]
VARIABLE STREAM IN float u2 [sizeX, sizeY, sizeZ]
VARIABLE STREAM IN float u3 [sizeX, sizeY, sizeZ]
VARIABLE STREAM OUT float ret_u1 [sizeX, sizeY, sizeZ]
VARIABLE STREAM OUT float ret_u2 [sizeX, sizeY, sizeZ]
VARIABLE STREAM OUT float ret_u3 [sizeX, sizeY, sizeZ]

VARIABLE int sizeX
VARIABLE int sizeY
VARIABLE int sizeZ

VARIABLE int chunkX
VARIABLE int chunkY
VARIABLE int chunkZ


TASK [1..sizeX - 1:chunkX, 1..sizeY - 1:chunkY, 1..sizeZ - 1:chunkZ]
SPM_WINDOWS 3

DECLARE registration1Mega r [width = chunkX, height = chunkY, depth = chunkZ, dt = 0.20f]

ASSERT chunkX > 0
ASSERT chunkY > 0
ASSERT chunkZ > 0
ASSERT (sizeX - 2) > 0
ASSERT (sizeY - 2) > 0
ASSERT (sizeZ - 2) > 0
ASSERT (sizeX - 2) % chunkX == 0
ASSERT (sizeY - 2) % chunkY == 0
ASSERT (sizeZ - 2) % chunkZ == 0

CREATE_SPM r float v1_in [chunkX, chunkY, chunkZ]
CREATE_SPM r float v2_in [chunkX, chunkY, chunkZ]
CREATE_SPM r float v3_in [chunkX, chunkY, chunkZ]
CREATE_SPM r float u1_in [chunkX + 2, chunkY + 2, chunkZ + 2]
CREATE_SPM r float u2_in [chunkX + 2, chunkY + 2, chunkZ + 2]
CREATE_SPM r float u3_in [chunkX + 2, chunkY + 2, chunkZ + 2]
CREATE_SPM r float u1_out [chunkX, chunkY, chunkZ]
CREATE_SPM r float u2_out [chunkX, chunkY, chunkZ]
CREATE_SPM r float u3_out [chunkX, chunkY, chunkZ]

v1[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1] => r.v1_in[0..chunkX, 0..chunkY, 0..chunkZ]
v2[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1] => r.v2_in[0..chunkX, 0..chunkY, 0..chunkZ]
v3[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1] => r.v3_in[0..chunkX, 0..chunkY, 0..chunkZ]
u1[0..sizeX, 0..sizeY, 0..sizeZ] => r.u1_in[0..chunkX + 2, 0..chunkY + 2, 0..chunkZ + 2]
u2[0..sizeX, 0..sizeY, 0..sizeZ] => r.u2_in[0..chunkX + 2, 0..chunkY + 2, 0..chunkZ + 2]
u3[0..sizeX, 0..sizeY, 0..sizeZ] => r.u3_in[0..chunkX + 2, 0..chunkY + 2, 0..chunkZ + 2]
r.u1_out[0..chunkX, 0..chunkY, 0..chunkZ] => ret_u1[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1]
r.u2_out[0..chunkX, 0..chunkY, 0..chunkZ] => ret_u2[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1]
r.u3_out[0..chunkX, 0..chunkY, 0..chunkZ] => ret_u3[1..sizeX - 1, 1..sizeY - 1, 1..sizeZ - 1]

r.v1_in[0..chunkX, 0..chunkY, 0..chunkZ] => r.v1
r.v2_in[0..chunkX, 0..chunkY, 0..chunkZ] => r.v2
r.v3_in[0..chunkX, 0..chunkY, 0..chunkZ] => r.v3
r.u1_in[1..chunkX + 1, 1..chunkY + 1, 1..chunkZ + 1] => r.u1_Center
r.u2_in[1..chunkX + 1, 1..chunkY + 1, 1..chunkZ + 1] => r.u2_Center
r.u3_in[1..chunkX + 1, 1..chunkY + 1, 1..chunkZ + 1] => r.u3_Center
r.u1_result => r.u1_out[0..chunkX, 0..chunkY, 0..chunkZ]
r.u2_result => r.u2_out[0..chunkX, 0..chunkY, 0..chunkZ]
r.u3_result => r.u3_out[0..chunkX, 0..chunkY, 0..chunkZ]
